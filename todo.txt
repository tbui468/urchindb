Look here for hints on creating a database:
    https://cs.brown.edu/courses/csci1270/website_2021/

Implement key/value database

    Index Record:
        uint32_t next_off
        uint32_t data_off
        uint32_t data_size
        uint32_t key_size
        char* key

    Data Record
        char* data

    Apply course-grain locking
        just wrap code in public functions in either read/write and unlock

    Apply fine-grain locking
        Where should the lock be applied?  (eg, what byte region)
            Lock the entire chain - but other chains (including the freelist) can still be used by other processes

    B tree instead of hash table
        Why use a b tree?  If data is index using a b-tree, we can search for ALL records that match a condition
            eg, if age > 0 and age < 10.
            Right now, we can't do that
        But would require user defining a table
            database would assign primary keys and index by primary keys by default
            when making table, user could specify which field to index

    Does paging make database faster?
        Write some tests that write/read to database.
        Add pager that reads fixed data from the index and data files into memory
        Unless data is written, just read data from buffers in memory instead of accessing disk
        Only when something is written (eg, using db_store), do we write buffers back to disk

    Make it a distributed database - need to add network support
        how to keep all databases consistent?  !!!consensus!!!
        Should all instances have the same internal format, or just the same keys/values?
        Would also need to timestamp stuff
